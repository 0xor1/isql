// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	driver "database/sql/driver"
	isql "github.com/0xor1/isql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockOpener is a mock of Opener interface
type MockOpener struct {
	ctrl     *gomock.Controller
	recorder *MockOpenerMockRecorder
}

// MockOpenerMockRecorder is the mock recorder for MockOpener
type MockOpenerMockRecorder struct {
	mock *MockOpener
}

// NewMockOpener creates a new mock instance
func NewMockOpener(ctrl *gomock.Controller) *MockOpener {
	mock := &MockOpener{ctrl: ctrl}
	mock.recorder = &MockOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpener) EXPECT() *MockOpenerMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockOpener) Open(driverName, dataSourceName string) (isql.DB, error) {
	ret := m.ctrl.Call(m, "Open", driverName, dataSourceName)
	ret0, _ := ret[0].(isql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockOpenerMockRecorder) Open(driverName, dataSourceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOpener)(nil).Open), driverName, dataSourceName)
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockDB) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockDBMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDB)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method
func (m *MockDB) QueryContext(ctx context.Context, query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockDBMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDB)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method
func (m *MockDB) QueryRowContext(ctx context.Context, query string, args ...interface{}) isql.Row {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockDBMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDB)(nil).QueryRowContext), varargs...)
}

// Begin mocks base method
func (m *MockDB) Begin() (isql.Tx, error) {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(isql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// BeginTx mocks base method
func (m *MockDB) BeginTx(ctx context.Context, opts *sql.TxOptions) (isql.Tx, error) {
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(isql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx
func (mr *MockDBMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), ctx, opts)
}

// Close mocks base method
func (m *MockDB) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// Driver mocks base method
func (m *MockDB) Driver() driver.Driver {
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver
func (mr *MockDBMockRecorder) Driver() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockDB)(nil).Driver))
}

// Exec mocks base method
func (m *MockDB) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), varargs...)
}

// Ping mocks base method
func (m *MockDB) Ping() error {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDBMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDB)(nil).Ping))
}

// PingContext mocks base method
func (m *MockDB) PingContext(ctx context.Context) error {
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext
func (mr *MockDBMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockDB)(nil).PingContext), ctx)
}

// Prepare mocks base method
func (m *MockDB) Prepare(query string) (isql.Stmt, error) {
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(isql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockDBMockRecorder) Prepare(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDB)(nil).Prepare), query)
}

// PrepareContext mocks base method
func (m *MockDB) PrepareContext(ctx context.Context, query string) (isql.Stmt, error) {
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(isql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext
func (mr *MockDBMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockDB)(nil).PrepareContext), ctx, query)
}

// Query mocks base method
func (m *MockDB) Query(query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDB)(nil).Query), varargs...)
}

// QueryRow mocks base method
func (m *MockDB) QueryRow(query string, args ...interface{}) isql.Row {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockDBMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDB)(nil).QueryRow), varargs...)
}

// SetConnMaxLifetime mocks base method
func (m *MockDB) SetConnMaxLifetime(d time.Duration) {
	m.ctrl.Call(m, "SetConnMaxLifetime", d)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime
func (mr *MockDBMockRecorder) SetConnMaxLifetime(d interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockDB)(nil).SetConnMaxLifetime), d)
}

// SetMaxIdleConns mocks base method
func (m *MockDB) SetMaxIdleConns(n int) {
	m.ctrl.Call(m, "SetMaxIdleConns", n)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns
func (mr *MockDBMockRecorder) SetMaxIdleConns(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockDB)(nil).SetMaxIdleConns), n)
}

// SetMaxOpenConns mocks base method
func (m *MockDB) SetMaxOpenConns(n int) {
	m.ctrl.Call(m, "SetMaxOpenConns", n)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns
func (mr *MockDBMockRecorder) SetMaxOpenConns(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockDB)(nil).SetMaxOpenConns), n)
}

// Stats mocks base method
func (m *MockDB) Stats() sql.DBStats {
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(sql.DBStats)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockDBMockRecorder) Stats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockDB)(nil).Stats))
}

// MockDBCore is a mock of DBCore interface
type MockDBCore struct {
	ctrl     *gomock.Controller
	recorder *MockDBCoreMockRecorder
}

// MockDBCoreMockRecorder is the mock recorder for MockDBCore
type MockDBCoreMockRecorder struct {
	mock *MockDBCore
}

// NewMockDBCore creates a new mock instance
func NewMockDBCore(ctrl *gomock.Controller) *MockDBCore {
	mock := &MockDBCore{ctrl: ctrl}
	mock.recorder = &MockDBCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBCore) EXPECT() *MockDBCoreMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockDBCore) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockDBCoreMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDBCore)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method
func (m *MockDBCore) QueryContext(ctx context.Context, query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockDBCoreMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDBCore)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method
func (m *MockDBCore) QueryRowContext(ctx context.Context, query string, args ...interface{}) isql.Row {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockDBCoreMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDBCore)(nil).QueryRowContext), varargs...)
}

// MockReplicaSet is a mock of ReplicaSet interface
type MockReplicaSet struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaSetMockRecorder
}

// MockReplicaSetMockRecorder is the mock recorder for MockReplicaSet
type MockReplicaSetMockRecorder struct {
	mock *MockReplicaSet
}

// NewMockReplicaSet creates a new mock instance
func NewMockReplicaSet(ctrl *gomock.Controller) *MockReplicaSet {
	mock := &MockReplicaSet{ctrl: ctrl}
	mock.recorder = &MockReplicaSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicaSet) EXPECT() *MockReplicaSetMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockReplicaSet) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockReplicaSetMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockReplicaSet)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method
func (m *MockReplicaSet) QueryContext(ctx context.Context, query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockReplicaSetMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockReplicaSet)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method
func (m *MockReplicaSet) QueryRowContext(ctx context.Context, query string, args ...interface{}) isql.Row {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockReplicaSetMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockReplicaSet)(nil).QueryRowContext), varargs...)
}

// Primary mocks base method
func (m *MockReplicaSet) Primary() isql.DBCore {
	ret := m.ctrl.Call(m, "Primary")
	ret0, _ := ret[0].(isql.DBCore)
	return ret0
}

// Primary indicates an expected call of Primary
func (mr *MockReplicaSetMockRecorder) Primary() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Primary", reflect.TypeOf((*MockReplicaSet)(nil).Primary))
}

// Slaves mocks base method
func (m *MockReplicaSet) Slaves() []isql.DBCore {
	ret := m.ctrl.Call(m, "Slaves")
	ret0, _ := ret[0].([]isql.DBCore)
	return ret0
}

// Slaves indicates an expected call of Slaves
func (mr *MockReplicaSetMockRecorder) Slaves() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slaves", reflect.TypeOf((*MockReplicaSet)(nil).Slaves))
}

// MockRow is a mock of Row interface
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockRow) Scan(dest ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), dest...)
}

// MockRows is a mock of Rows interface
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockRows) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// ColumnTypes mocks base method
func (m *MockRows) ColumnTypes() ([]isql.ColumnType, error) {
	ret := m.ctrl.Call(m, "ColumnTypes")
	ret0, _ := ret[0].([]isql.ColumnType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnTypes indicates an expected call of ColumnTypes
func (mr *MockRowsMockRecorder) ColumnTypes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockRows)(nil).ColumnTypes))
}

// Columns mocks base method
func (m *MockRows) Columns() ([]string, error) {
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Columns indicates an expected call of Columns
func (mr *MockRowsMockRecorder) Columns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockRows)(nil).Columns))
}

// Err mocks base method
func (m *MockRows) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method
func (m *MockRows) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// NextResultSet mocks base method
func (m *MockRows) NextResultSet() bool {
	ret := m.ctrl.Call(m, "NextResultSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextResultSet indicates an expected call of NextResultSet
func (mr *MockRowsMockRecorder) NextResultSet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResultSet", reflect.TypeOf((*MockRows)(nil).NextResultSet))
}

// Scan mocks base method
func (m *MockRows) Scan(dest ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowsMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), dest...)
}

// MockStmt is a mock of Stmt interface
type MockStmt struct {
	ctrl     *gomock.Controller
	recorder *MockStmtMockRecorder
}

// MockStmtMockRecorder is the mock recorder for MockStmt
type MockStmtMockRecorder struct {
	mock *MockStmt
}

// NewMockStmt creates a new mock instance
func NewMockStmt(ctrl *gomock.Controller) *MockStmt {
	mock := &MockStmt{ctrl: ctrl}
	mock.recorder = &MockStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStmt) EXPECT() *MockStmtMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockStmt) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStmtMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmt)(nil).Close))
}

// Exec mocks base method
func (m *MockStmt) Exec(args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockStmtMockRecorder) Exec(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmt)(nil).Exec), args...)
}

// ExecContext mocks base method
func (m *MockStmt) ExecContext(ctx context.Context, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockStmtMockRecorder) ExecContext(ctx interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockStmt)(nil).ExecContext), varargs...)
}

// Query mocks base method
func (m *MockStmt) Query(args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockStmtMockRecorder) Query(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmt)(nil).Query), args...)
}

// QueryContext mocks base method
func (m *MockStmt) QueryContext(ctx context.Context, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockStmtMockRecorder) QueryContext(ctx interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockStmt)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method
func (m *MockStmt) QueryRow(args ...interface{}) isql.Row {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockStmtMockRecorder) QueryRow(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockStmt)(nil).QueryRow), args...)
}

// QueryRowContext mocks base method
func (m *MockStmt) QueryRowContext(ctx context.Context, args ...interface{}) isql.Row {
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockStmtMockRecorder) QueryRowContext(ctx interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockStmt)(nil).QueryRowContext), varargs...)
}

// MockTx is a mock of Tx interface
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// ExecContext mocks base method
func (m *MockTx) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockTxMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockTx)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method
func (m *MockTx) QueryContext(ctx context.Context, query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockTxMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockTx)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method
func (m *MockTx) QueryRowContext(ctx context.Context, query string, args ...interface{}) isql.Row {
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockTxMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockTx)(nil).QueryRowContext), varargs...)
}

// Commit mocks base method
func (m *MockTx) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// Exec mocks base method
func (m *MockTx) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockTxMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTx)(nil).Exec), varargs...)
}

// Prepare mocks base method
func (m *MockTx) Prepare(query string) (isql.Stmt, error) {
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(isql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockTxMockRecorder) Prepare(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockTx)(nil).Prepare), query)
}

// PrepareContext mocks base method
func (m *MockTx) PrepareContext(ctx context.Context, query string) (isql.Stmt, error) {
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(isql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext
func (mr *MockTxMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockTx)(nil).PrepareContext), ctx, query)
}

// Query mocks base method
func (m *MockTx) Query(query string, args ...interface{}) (isql.Rows, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(isql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockTxMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTx)(nil).Query), varargs...)
}

// QueryRow mocks base method
func (m *MockTx) QueryRow(query string, args ...interface{}) isql.Row {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(isql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockTxMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTx)(nil).QueryRow), varargs...)
}

// Rollback mocks base method
func (m *MockTx) Rollback() error {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback))
}

// Stmt mocks base method
func (m *MockTx) Stmt(stmt *sql.Stmt) isql.Stmt {
	ret := m.ctrl.Call(m, "Stmt", stmt)
	ret0, _ := ret[0].(isql.Stmt)
	return ret0
}

// Stmt indicates an expected call of Stmt
func (mr *MockTxMockRecorder) Stmt(stmt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stmt", reflect.TypeOf((*MockTx)(nil).Stmt), stmt)
}

// StmtContext mocks base method
func (m *MockTx) StmtContext(ctx context.Context, stmt *sql.Stmt) isql.Stmt {
	ret := m.ctrl.Call(m, "StmtContext", ctx, stmt)
	ret0, _ := ret[0].(isql.Stmt)
	return ret0
}

// StmtContext indicates an expected call of StmtContext
func (mr *MockTxMockRecorder) StmtContext(ctx, stmt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StmtContext", reflect.TypeOf((*MockTx)(nil).StmtContext), ctx, stmt)
}

// MockColumnType is a mock of ColumnType interface
type MockColumnType struct {
	ctrl     *gomock.Controller
	recorder *MockColumnTypeMockRecorder
}

// MockColumnTypeMockRecorder is the mock recorder for MockColumnType
type MockColumnTypeMockRecorder struct {
	mock *MockColumnType
}

// NewMockColumnType creates a new mock instance
func NewMockColumnType(ctrl *gomock.Controller) *MockColumnType {
	mock := &MockColumnType{ctrl: ctrl}
	mock.recorder = &MockColumnTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColumnType) EXPECT() *MockColumnTypeMockRecorder {
	return m.recorder
}

// DatabaseTypeName mocks base method
func (m *MockColumnType) DatabaseTypeName() string {
	ret := m.ctrl.Call(m, "DatabaseTypeName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseTypeName indicates an expected call of DatabaseTypeName
func (mr *MockColumnTypeMockRecorder) DatabaseTypeName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseTypeName", reflect.TypeOf((*MockColumnType)(nil).DatabaseTypeName))
}

// DecimalSize mocks base method
func (m *MockColumnType) DecimalSize() (int64, int64, bool) {
	ret := m.ctrl.Call(m, "DecimalSize")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// DecimalSize indicates an expected call of DecimalSize
func (mr *MockColumnTypeMockRecorder) DecimalSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecimalSize", reflect.TypeOf((*MockColumnType)(nil).DecimalSize))
}

// Length mocks base method
func (m *MockColumnType) Length() (int64, bool) {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Length indicates an expected call of Length
func (mr *MockColumnTypeMockRecorder) Length() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockColumnType)(nil).Length))
}

// Name mocks base method
func (m *MockColumnType) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockColumnTypeMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockColumnType)(nil).Name))
}

// Nullable mocks base method
func (m *MockColumnType) Nullable() (bool, bool) {
	ret := m.ctrl.Call(m, "Nullable")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Nullable indicates an expected call of Nullable
func (mr *MockColumnTypeMockRecorder) Nullable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockColumnType)(nil).Nullable))
}

// ScanType mocks base method
func (m *MockColumnType) ScanType() reflect.Type {
	ret := m.ctrl.Call(m, "ScanType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ScanType indicates an expected call of ScanType
func (mr *MockColumnTypeMockRecorder) ScanType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockColumnType)(nil).ScanType))
}
